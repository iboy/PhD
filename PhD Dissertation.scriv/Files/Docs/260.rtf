{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs36 \cf0 \\begin\{scriptsize\}\
\\noindent\
\{\\itshape Quartz Composer Core Image Kernel -- Subset of GLSL\\\\\}\
\\begin\{verbatim\}\
	\
const float pi = 3.141592654;\
\
float distColorR(vec4 pix, vec4 color)\
  \{\
    float diff = abs(pix.r - color.r);\
    diff = diff > 3. ? 6. - diff : diff;\
    return diff;\
  \}\
\
vec4 RGBtoHSV(vec4 rgb)\
  \{\
    float V = max(rgb.r, max(rgb.g, rgb.b));\
    V = max(V, 0.0001); // V = 0.0 causes problems later\
\
    float minC = min(rgb.r, min(rgb.g, rgb.b));\
    float delta = V - minC;\
\
    float S = delta / V;\
    S = S > 1.0 ? 1.0 : S;\
\
    float f = (rgb.r == minC) ? rgb.g - rgb.b : ((rgb.g == minC) ? \
      rgb.b - rgb.r : rgb.r - rgb.g);\
    float i = (rgb.r == minC) ? 3.0 : \
      ((rgb.g == minC) ? 5.0 : 1.0);\
    float H = i - f / (V - minC);\
\
    return vec4(H, S, V, 1.0);\
  \}\
\
kernel vec4 returnCompImage(sampler image, sampler background,\
  __color keyColor, float sensitivity)\
  \{\
    vec4 pix = sample(image, samplerCoord(image));\
    vec4 backpix = sample(background, samplerCoord(background));\
    vec4 color2 = unpremultiply(keyColor);\
    vec4 hsv = RGBtoHSV(pix);\
\
    float colorDist = distColorR(hsv,RGBtoHSV(color2));\
    float diff = colorDist - 1./sensitivity;\
\
    diff = hsv.b < 0.05 ? 1.0 : diff;\
\
    pix = compare(vec4(diff,diff,diff,1.0), backpix, pix);\
    pix.a = 1.0;\
    return pix;\
  \}\
\
\\end\{verbatim\}\
\
\
(Chroma Keying Example GLSL Code adapted from Sam Kass)[^ChQCCode][^ChQCCode]: Sam Kass. Source: [http://www.samkass.com/blog/][http://www.samkass.com/blog/]\
\
\\end\{scriptsize\}\
\
}