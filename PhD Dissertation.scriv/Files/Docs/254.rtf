{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs36 \cf0 The early design layout of the avatar was composed of a live video of a performer's chroma-keyed mouth (see [][#fig:figure_003_real_time_garbage_matte]), talking and singing in  real-time and pre-recorded video eyes, the gaze direction being controllable via the *Wii-Remote*. These video elements were composited (in real-time) and textured onto a sphere. In *Quartz Composer*, 3D objects are limited to basic primitives: spheres, cubes and teapots. \
\
[][#fig:figure_003_real_time_garbage_matte] illustrates how *Quartz Composer* has been used to dynamically create a *garbage matte*[^ChQCGarbageMatte] and chroma-keying to isolate non-blue elements of the actors face. There follows an annotation of the chroma-keying process in *Quartz Composer*. [][#fig:figure_quartz_composer_GLSL_chromakey] depicts the contents of a `macro patch'. In *Quartz Composer*, a macro patch contains sub-patches that normally take incoming data, here image sources[^ChQCImageSources], process that data and finally *publish* the resulting data. Making several patches into a macro is an organisational convenience and encapsulates re-usable functionality.\
\
[^ChQCGarbageMatte]: A garbage matte is a mask that crops out unwanted elements in a video image.\
\
[^ChQCImageSources]: An image can be a single still or each frame from a video sequence.\
\
[][#fig:figure_quartz_composer_GLSL_chromakey] uses some annotation and layout niceties available in Mac OS 10.5 (Leopard), that help to describe the data flow: in language: the sources images *provide* dimension data to math patches that perform calculations that are, in turn, passed to an `image transform' patch to resize the background image to match the size and aspect ratio of the foreground image. The resized background images, the foreground image and two other values, a colour -- called *keyColor* -- and a number -- called *sensitivity* -- are passed into a *Core Image Filter* patch. The *Core Image Filter* executes a per-pixel routine on incoming source images written in *Open-GL Shader Language* (*GLSL*). The *GLSL* code embedded in the *Core Image Filter* patch is reproduced below ([][#code].\\\\\
\
![fig:figure_quartz_composer_GLSL_chromakey][]\
[fig:figure_quartz_composer_GLSL_chromakey]: figure_quartz_composer_GLSL_chromakey "Data processing in the chroma-keying sub-patch" width=418px height=139px}