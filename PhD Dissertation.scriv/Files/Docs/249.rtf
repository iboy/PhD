{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs36 \cf0 *Quartz Composer* is a technology that exploits the graphics processing unit (GPU) of the host Apple Mac, running Mac OS 10.4 (Tiger). Major enhancements have been made to *Quartz Composer* in Mac OS 10.5 (Leopard). Some key points:\
\
* you create *compositions* in a simple to use visual programming environment where you graph connections between objects (*patches*). There are around two hundred built in patches. *Leopard* developments provide an API for programmers to created custom functionality by writing their own patches;\
\
* it works in a 3D context as defined by *Open-GL* and supports *Open-GL Shader Language (GLSL)*, enabling full and multi screen real-time video, image processing and 3D;\
\
* it uses Apple's *Quicktime* technology for media importing and the playback of compositions;\
\
* it works with data aggregation standards defined by *RSS* and a logic/control language defined by *javascript*/*ECMAScript*;\
\
* MIDI, OSC[^ChQCOSC] and audio input processing allowing sophisticated network communication and composition control by external sources and sensors;\
\
[^ChQCOSC]: Open Sound Control Introduction: [http://opensoundcontrol.org/introduction-osc](http://opensoundcontrol.org/introduction-osc)\
\
* *Xcode*, Apple's free developers environment[^ChQCXcode], allows *Quartz Composer* compositions to be embedded in native applications for more complex control over rendering, user interface design and interoperability with other technologies.\
\
[^ChQCXcode]: Xcode: [http://developer.apple.com/tools/xcode/][http://developer.apple.com/tools/xcode/]\
\
*Quartz Composer* is an opportunity for interactive motion graphics artists to explore *resolution independent* imaging and the sophisticated graphics technology of the latest *Mac OS*. *Quartz* is Apple's brand name for a suite of technologies known internally at Apple as *Core Graphics*. It is based on a PDF graphics/imaging model and extends from still image and text into 3D graphics with Open-GL and real-time video processing with a collection of techniques and APIs called *Core Video*.\
\
In addition to real-time interactions and integration with the image processing libraries Apple calls *Core Image*[^ChQCCoreImage], *Quartz Composer*, according to Apple, can **make data-driven visual effects, and even perform live performance animations." (Apple Computer, 2007a).\
\
[^ChQCCoreImage]: *Core Image*: Resolution-independent 2D graphics based on PDF technologies and 3D graphics based on hardware accelerated *Open-GL*.\
\
*Quartz Composer* is a visual programming environment, where patches are plumbed together with *noodles* that represent data flow through a sequence of connected objects. For the non-programmer, it is a joy to use -- providing rapid prototyping of complex programmatic ideas. For example, applying live video textures to interactive forms in real-time 3D space is a five second operation -- needing no lines of textual code.\
\
![fig:figure_video_movie_timebase_patch_demo_001][]\
[fig:figure_video_movie_timebase_patch_demo_001]: figure_video_movie_timebase_patch_demo_001 "Live video capture is blended with a movie in Quartz Composer" width=418px height=314px\
\
[][#fig:figure_video_movie_timebase_patch_demo_001] shows each kind of basic patch in *Quartz Composer* -- *providers* (blue), *processors* (green) and *consumers* (pink) [Apple Computer, 2009a][#apple_quartz_-2]. It also demonstrates how some patches have a *time-base*. One imported Quicktime movie plays according to the frames per second of the composition, the other accepts numerical data on the input port called *Patch Time*. Such changing numerical data could, for example, come from the normalised ($-$1 to 1) X co-ordinates of the mouse -- effectively scrubbing the playback of the video. [][#fig:figure_004_interactive_eyes] illustrates the scrubbing of a short movie that contains eyes moving left--centre--right--centre.\
\
![fig:figure_004_interactive_eyes][]\
[fig:figure_004_interactive_eyes]: figure_004_interactive_eyes "Controlling the time-base of pre-recorded video in Quartz Composer -- Interactive Video Eyes" width=418px height=314px\
\
In an earlier iteration, *Quartz Composer*, as *PixelShox Studio*[^ChQCPixelShox] had a vibrant life favoured by VJs and live-motion graphics artists. *PixelShox Studio* was written by Pierre-Olivier Latour, circa 2003. Pierre-Olivier Latour now works for Apple and *Quartz Composer* is a small, but significant, part of a wider development architecture. *Quartz Composer* compositions integrate nicely into the *Cocoa* programming environment, utilising *bindings* to make it easy to write applications that connect GUI controls to visual compositions. Also *Quartz Composer* compositions can be turned into *Image Units* and made available as video processing plug-ins for compatible applications, like Avid's *Xpress Pro*, Apple's *Final Cut Pro* and *Motion*[^ChQCNoiseInd]\
\
[^ChQCPixelShox]: *PixelShox Studio*: [http://www.pol-online.net/pixelshox_technology/index.php](http://www.pol-online.net/pixelshox_technology/index.php)\
\
[^ChQCNoiseInd]: Noise Industries' *FXFactory*: [http://www.noiseindustries.com/](http://www.noiseindustries.com/).\
\
An early vision for *PixelShox* was for artistic use "professionally in any project where interactive visuals are required: V-Jaying (sic), multimedia installations, presentations, [or] concerts." [Latour (2003)][#Latour:2003ee]. *Quartz Composer* is significantly pruned of functionality when compared with *PixelShox*. Although it was never completed, it is likely that the past functionality of *PixelShox* may be a rough roadmap of where *Quartz Composer* is heading. One repeated feature request is support for importing arbitrary 3D objects.\
\
}