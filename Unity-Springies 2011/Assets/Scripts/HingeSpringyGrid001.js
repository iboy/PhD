// Lines are drawn separately to allow different materials to be applied to the lines.// TODO: 	It would be good to generalised the problem and have the objects, materials // 			and points arrays to be variable in size and dynamic (if that is the right word)private var cornerLines1 : VectorLine;private var cornerLines2 : VectorLine;private var cornerLines3 : VectorLine;private var cornerLines4 : VectorLine;private var cornerPoints1 : Vector3[];private var cornerPoints2 : Vector3[];private var cornerPoints3 : Vector3[];private var cornerPoints4 : Vector3[];var lineMaterial1 : Material;var lineMaterial2 : Material;var lineMaterial3 : Material;//var lineMaterial4 : Material;var lineWidth = 8.0;var object1: Transform;var object2: Transform;var object3: Transform;//var object4: Transform;var frameCornersTopLeft: Transform;var frameCornersBottomLeft: Transform;var frameCornersBottomRight: Transform;var frameCornersTopRight: Transform;function Start () { 												cornerPoints1 =  [ 							Vector3(frameCornersTopLeft.position.x, .4, frameCornersTopLeft.position.z),							Vector3(object2.position.x, .4, object2.position.z) 	];	cornerPoints2 =  [ 							Vector3(frameCornersTopRight.position.x, .4, frameCornersTopRight.position.z),							Vector3(object3.position.x, .4, object3.position.z)	];			cornerPoints3 =  [ 							Vector3(frameCornersBottomLeft.position.x, .4, frameCornersBottomLeft.position.z),							Vector3(object1.position.x, .4, object1.position.z)	];							//	cornerPoints4 =  [ ////							Vector3(frameCornersBottomRight.position.x, .4, frameCornersBottomRight.position.z),//							Vector3(object4.position.x, .4, object4.position.z)//	];	cornerLines1 =   VectorLine("MyCornerLines1", cornerPoints1, Color.black, lineMaterial1, lineWidth);					cornerLines2 =   VectorLine("MyCornerLines2", cornerPoints2, Color.black, lineMaterial2, lineWidth);		cornerLines3 =   VectorLine("MyCornerLines3", cornerPoints3, Color.black, lineMaterial3, lineWidth);				//	cornerLines4 =   VectorLine("MyCornerLines4", cornerPoints4, Color.black, lineMaterial4, lineWidth);		}function Update () { 			cornerPoints1 =  [ 							Vector3(frameCornersTopLeft.position.x, .4, frameCornersTopLeft.position.z),							Vector3(object2.position.x, .4, object2.position.z)	];			cornerPoints2 =  [ 							Vector3(frameCornersTopRight.position.x, .4, frameCornersTopRight.position.z),							Vector3(object3.position.x, .4, object3.position.z) 	];	cornerPoints3 =  [ 							Vector3(frameCornersBottomLeft.position.x, .4, frameCornersBottomLeft.position.z),							Vector3(object1.position.x, .4, object1.position.z)	];//	cornerPoints4 =  [ ////							Vector3(frameCornersBottomRight.position.x, .4, frameCornersBottomRight.position.z),//							Vector3(object4.position.x, .4, object4.position.z)//	];			// resize / redraw cornerPoints1	cornerLines1.Resize (cornerPoints1);	Vector.SetWidths (cornerLines1, [	lineWidth												]);		Vector.DrawLine3D (cornerLines1);	// resize / redraw cornerPoints2		cornerLines2.Resize (cornerPoints2);	Vector.SetWidths (cornerLines2, [	lineWidth												]);		Vector.DrawLine3D (cornerLines2);			// resize / redraw cornerPoints3		cornerLines3.Resize (cornerPoints3);	Vector.SetWidths (cornerLines3, [	lineWidth												]);		Vector.DrawLine3D (cornerLines3);	//		// resize / redraw cornerPoints4	//	cornerLines4.Resize (cornerPoints4);//	Vector.SetWidths (cornerLines4, [	lineWidth//												]);	//	Vector.DrawLine3D (cornerLines4);				}