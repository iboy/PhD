static var use : XRayLineData;
var lineMaterial : Material;
var lineWidth = 1.0;
@HideInInspector
var shapePoints = MultiDim.JaggedVector3(0);

function Awake () {
	use = this;
		
	shapePoints = new MultiDim.JaggedVector3(2);
	// Cube
	shapePoints[0] = [Vector3(-0.5, -0.5, 0.5), Vector3(0.5, -0.5, 0.5), Vector3(-0.5, 0.5, 0.5), Vector3(-0.5, -0.5, 0.5), Vector3(0.5, -0.5, 0.5), Vector3(0.5, 0.5, 0.5), Vector3(0.5, 0.5, 0.5), Vector3(-0.5, 0.5, 0.5), Vector3(-0.5, 0.5, -0.5), Vector3(-0.5, 0.5, 0.5), Vector3(0.5, 0.5, 0.5), Vector3(0.5, 0.5, -0.5), Vector3(0.5, 0.5, -0.5), Vector3(-0.5, 0.5, -0.5), Vector3(-0.5, -0.5, -0.5), Vector3(-0.5, 0.5, -0.5), Vector3(0.5, 0.5, -0.5), Vector3(0.5, -0.5, -0.5), Vector3(0.5, -0.5, -0.5), Vector3(-0.5, -0.5, -0.5), Vector3(-0.5, -0.5, 0.5), Vector3(-0.5, -0.5, -0.5), Vector3(0.5, -0.5, -0.5), Vector3(0.5, -0.5, 0.5)];
	// Sphere
	shapePoints[1] = [Vector3(-0.25, 0.433, 0), Vector3(0, 0.5, 0), Vector3(0, 0.5, 0), Vector3(-0.177, 0.433, -0.177), Vector3(-0.177, 0.433, -0.177), Vector3(-0.25, 0.433, 0), Vector3(0, 0.5, 0), Vector3(0, 0.433, -0.25), Vector3(0, 0.433, -0.25), Vector3(-0.177, 0.433, -0.177), Vector3(-0.306, 0.25, -0.306), Vector3(-0.177, 0.433, -0.177), Vector3(0, 0.433, -0.25), Vector3(0, 0.25, -0.433), Vector3(0, 0.25, -0.433), Vector3(-0.306, 0.25, -0.306), Vector3(-0.354, 0, -0.354), Vector3(-0.306, 0.25, -0.306), Vector3(0, 0.25, -0.433), Vector3(0, 0, -0.5), Vector3(0, 0, -0.5), Vector3(-0.354, 0, -0.354), Vector3(-0.306, -0.25, -0.306), Vector3(-0.354, 0, -0.354), Vector3(0, 0, -0.5), Vector3(0, -0.25, -0.433), Vector3(0, -0.25, -0.433), Vector3(-0.306, -0.25, -0.306), Vector3(-0.177, -0.433, -0.177), Vector3(-0.306, -0.25, -0.306), Vector3(0, -0.25, -0.433), Vector3(0, -0.433, -0.25), Vector3(0, -0.433, -0.25), Vector3(-0.177, -0.433, -0.177), Vector3(0, -0.433, -0.25), Vector3(0, -0.5, 0), Vector3(0, -0.5, 0), Vector3(-0.177, -0.433, -0.177), Vector3(0, -0.433, -0.25), Vector3(0.177, -0.433, -0.177), Vector3(0.177, -0.433, -0.177), Vector3(0, -0.5, 0), Vector3(0.177, -0.433, -0.177), Vector3(0.25, -0.433, 0), Vector3(0.25, -0.433, 0), Vector3(0, -0.5, 0), Vector3(0.433, -0.25, 0), Vector3(0.25, -0.433, 0), Vector3(0.433, -0.25, 0), Vector3(0.306, -0.25, 0.306), Vector3(0.354, 0, 0.354), Vector3(0.306, -0.25, 0.306), Vector3(0.354, 0, 0.354), Vector3(0, 0, 0.5), Vector3(0, 0.25, 0.433), Vector3(0, 0, 0.5), Vector3(0, 0.25, 0.433), Vector3(-0.306, 0.25, 0.306), Vector3(-0.177, 0.433, 0.177), Vector3(-0.306, 0.25, 0.306), Vector3(-0.177, 0.433, 0.177), Vector3(-0.25, 0.433, 0), Vector3(-0.177, 0.433, 0.177), Vector3(0, 0.5, 0), Vector3(0.25, -0.433, 0), Vector3(0.177, -0.433, 0.177), Vector3(0.177, -0.433, 0.177), Vector3(0, -0.5, 0), Vector3(0.306, -0.25, 0.306), Vector3(0.177, -0.433, 0.177), Vector3(0.306, -0.25, 0.306), Vector3(0, -0.25, 0.433), Vector3(0, 0, 0.5), Vector3(0, -0.25, 0.433), Vector3(0, 0, 0.5), Vector3(-0.354, 0, 0.354), Vector3(-0.306, 0.25, 0.306), Vector3(-0.354, 0, 0.354), Vector3(-0.306, 0.25, 0.306), Vector3(-0.433, 0.25, 0), Vector3(-0.25, 0.433, 0), Vector3(-0.433, 0.25, 0), Vector3(0.177, -0.433, 0.177), Vector3(0, -0.433, 0.25), Vector3(0, -0.433, 0.25), Vector3(0, -0.5, 0), Vector3(0, -0.25, 0.433), Vector3(0, -0.433, 0.25), Vector3(0, -0.25, 0.433), Vector3(-0.306, -0.25, 0.306), Vector3(-0.354, 0, 0.354), Vector3(-0.306, -0.25, 0.306), Vector3(-0.354, 0, 0.354), Vector3(-0.5, 0, 0), Vector3(-0.433, 0.25, 0), Vector3(-0.5, 0, 0), Vector3(-0.433, 0.25, 0), Vector3(-0.306, 0.25, -0.306), Vector3(0, -0.433, 0.25), Vector3(-0.177, -0.433, 0.177), Vector3(-0.177, -0.433, 0.177), Vector3(0, -0.5, 0), Vector3(-0.306, -0.25, 0.306), Vector3(-0.177, -0.433, 0.177), Vector3(-0.306, -0.25, 0.306), Vector3(-0.433, -0.25, 0), Vector3(-0.5, 0, 0), Vector3(-0.433, -0.25, 0), Vector3(-0.5, 0, 0), Vector3(-0.354, 0, -0.354), Vector3(-0.177, -0.433, 0.177), Vector3(-0.25, -0.433, 0), Vector3(-0.25, -0.433, 0), Vector3(0, -0.5, 0), Vector3(-0.433, -0.25, 0), Vector3(-0.25, -0.433, 0), Vector3(-0.433, -0.25, 0), Vector3(-0.306, -0.25, -0.306), Vector3(0, 0.25, 0.433), Vector3(0, 0.433, 0.25), Vector3(0, 0.433, 0.25), Vector3(-0.177, 0.433, 0.177), Vector3(0, 0.25, 0.433), Vector3(0.306, 0.25, 0.306), Vector3(0.306, 0.25, 0.306), Vector3(0.177, 0.433, 0.177), Vector3(0.177, 0.433, 0.177), Vector3(0, 0.433, 0.25), Vector3(0.306, 0.25, 0.306), Vector3(0.433, 0.25, 0), Vector3(0.433, 0.25, 0), Vector3(0.25, 0.433, 0), Vector3(0.25, 0.433, 0), Vector3(0.177, 0.433, 0.177), Vector3(0.433, 0.25, 0), Vector3(0.306, 0.25, -0.306), Vector3(0.306, 0.25, -0.306), Vector3(0.177, 0.433, -0.177), Vector3(0.177, 0.433, -0.177), Vector3(0.25, 0.433, 0), Vector3(0.306, 0.25, -0.306), Vector3(0, 0.25, -0.433), Vector3(0, 0.433, -0.25), Vector3(0.177, 0.433, -0.177), Vector3(0, 0.433, 0.25), Vector3(0, 0.5, 0), Vector3(0.177, 0.433, 0.177), Vector3(0, 0.5, 0), Vector3(0.25, 0.433, 0), Vector3(0, 0.5, 0), Vector3(0.354, 0, 0.354), Vector3(0.306, 0.25, 0.306), Vector3(0.354, 0, 0.354), Vector3(0.5, 0, 0), Vector3(0.5, 0, 0), Vector3(0.433, 0.25, 0), Vector3(0.5, 0, 0), Vector3(0.354, 0, -0.354), Vector3(0.354, 0, -0.354), Vector3(0.306, 0.25, -0.306), Vector3(0.354, 0, -0.354), Vector3(0, 0, -0.5), Vector3(0.433, -0.25, 0), Vector3(0.5, 0, 0), Vector3(0.433, -0.25, 0), Vector3(0.306, -0.25, -0.306), Vector3(0.306, -0.25, -0.306), Vector3(0.354, 0, -0.354), Vector3(0.306, -0.25, -0.306), Vector3(0, -0.25, -0.433), Vector3(0.177, 0.433, -0.177), Vector3(0, 0.5, 0), Vector3(0.177, -0.433, -0.177), Vector3(0.306, -0.25, -0.306), Vector3(-0.25, -0.433, 0), Vector3(-0.177, -0.433, -0.177)];
}